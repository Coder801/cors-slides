Что бы понят что такое кросс доменные запросы, сначала стоит рассмотреть что такое запрос и как это выглядит в работе

Что такое запрос? - это обращение на сервер.

Первое что нужно запомнить — браузер запрашивает и получает данные посредством HTTP протокола, поэтому его (браузер) еще называют HTTP клиентом.

HTTP — широко распространённый протокол передачи данных, изначально предназначенный для передачи гипертекстовых документов (то есть документов, которые могут содержать ссылки, позволяющие организовать переход к другим документам).

Аббревиатура HTTP расшифровывается как HyperText Transfer Protocol, «протокол передачи гипертекста». В соответствии со спецификацией OSI, HTTP является протоколом прикладного (верхнего, 7-го)

HTTP является синхронным протоколом. Это значит, что клиент послал запрос серверу и пока ждет от него ответ, следующие запросы послать не может

На что тратит время HTTP запрос
Запрос происходит в несколько этапов:

DNS-запрос — поиск ближайшего DNS-сервера, чтобы преобразовать URI (например, google.com) в его числовое представление — IP-адрес (74.125.87.99, прим. — получено посредством команды ping). Это адрес и будет реальным адресом сайта в Интернет.
соединение — установка соединения с сервером по полученному IP-адресу;
отправка данных;
ожидание ответа — ждем пока пакеты данных дойдут до сервера, он их обработает и ответ вернется назад;
получение данных.


Вид HTTP запроса
Строка запроса* — указан метод запроса (HTTP-метод), URI, версия протокола

Заголовки HTTP являются основной частью этих HTTP-запросов и ответов, и они несут информацию о браузере клиента, запрошенной странице, сервере и многом другом.
Остальная часть запроса содержит HTTP headers как пары "Name: Value" в каждой строке. Они содержат различную информацию о HTTP-запросе и вашем браузере. Например, строка "User-Agent" предоставляет информацию о версии браузера и операционной системе, которую вы используете. "Accept-Encoding"  сообщает серверу, может ли ваш браузер принимать сжатый output, например gzip.


GET: получение документа
Это основной метод, используемый для извлечения html, изображений, JavaScript, CSS и т. д. С использованием этого метода запрошено большинство данных, загружаемых в ваш браузер.
Например, при загрузке статьи Nettuts +, самая первая строка HTTP-запроса выглядит так:
GET /tutorials/other/top-20-mysql-best-practices/ HTTP/1.1

Как только html загрузится, браузер начнет отправлять GET-запрос изображений, который может выглядеть так:
GET /wp-content/themes/tuts_theme/images/header_bg_tall.png HTTP/1.1

Веб-формы можно настроить под метод GET. Вот пример.
Когда эта форма отправлена, HTTP-запрос начинается так:
GET /foo.php?first_name=John&last_name=Doe&action=Submit HTTP/1.1



POST: отправка данных на сервер
Даже если вы можете отправлять данные на сервер с помощью GET и строки запроса, во многих случаях POST будет предпочтительнее. Отправка больших объёмов данных с помощью GET нецелесообразна и имеет ограничения.

Здесь нужно отметить три важных момента:
Путь в первой строке просто /foo.php, и больше нет строки запроса.
Добавлены заголовки Content-Type и Content-Length, которые предоставляют информацию об отправляемых данных.
Все данные теперь отправляются после заголовков, в том же формате, что и строка запроса.
Смысл POST в том, чтобы создать/модифицировать ресурс, то есть
идеологически POST нельзя кешировать потому что клиент хочет что-то
изменить. А ему возвращают результат от предыдущего изменения.
Более того, кешировать POST дважды неверно, потому что POST это
единственный "неидемпотентный"
Запросы POST чаще всего отправляются веб-формами. Давайте изменим предыдущий пример формы на метод POST.


Показать в codepen запросы в действии

Окей, мы познакомились с запросами для сбора данных и для добавления новых. Это относится к простым запросам